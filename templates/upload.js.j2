const INITIAL_REMAINING_SEC = {{ remaining_sec }}
const LOAD_TIME = Date.now()
const MAX_SIZE_BYTES = {{ maxsize_bytes }}
let uploaded_bytes = {{ current_bytes }}

function format_time_left() {
    const seconds_remaining = Math.round(INITIAL_REMAINING_SEC - (Date.now() - LOAD_TIME) / 1000)
    const days = (seconds_remaining / (3600 * 24)) | 0
    const hours = ((seconds_remaining - days*3600*24) / 3600) | 0
    const minutes = ((seconds_remaining - days*3600*24 - hours*3600) / 60) | 0
    const seconds = ((seconds_remaining - days*3600*24 - hours*3600 - minutes*60)) | 0
    if (days < 1000) {
        return `${days}d ${hours}h ${minutes}m ${seconds}s`
    } else {
        return "the far future"
    }
}

function format_expiry_date() {
    const seconds_remaining = Math.round(INITIAL_REMAINING_SEC - (Date.now() - LOAD_TIME) / 1000)
    // The format is something like "Tuesday, 13 December 2022 at 19:26:21 CET"
    return new Date(Date.now() + seconds_remaining*1000).toLocaleString("en-GB", { dateStyle: 'full', timeStyle: 'long' })
}

function format_bytes(bytes) {
    const order = Math.log2(bytes)
    const multiple = ((order / 10) | 0)
    const prefix = ['', 'Ki', 'Mi', 'Gi', 'Ti', 'Pi']
    const remaning_size_in_multiples = bytes / Math.pow(2, 10*multiple)

    if (multiple < prefix.length) {
        return `${remaning_size_in_multiples.toPrecision(4)} ${prefix[multiple]}B`
    } else {
        return "a ridiculous amount"
    }
}

function update_time_left() {
    let rem = document.getElementById("remaining")
    if (rem != null) {
        rem.innerText = format_time_left()
        rem.title = format_expiry_date()
    }
}

function update_current_bytes() {
    let bts = document.getElementById("bytes")
    if (bts != null)
        bts.innerText = format_bytes(uploaded_bytes)
}

function update_max_bytes() {
    let bts = document.getElementById("max-bytes")
    if (bts != null)
        bts.innerText = format_bytes(MAX_SIZE_BYTES)
}

function update_progressbar(id, step, total) {
    let pr = document.getElementById(id)
    let label = pr.querySelector(".label")
    let bar = pr.querySelector(".bar")
    label.innerText = `${format_bytes(step)}/${format_bytes(total)}`;
    bar.style.width = `${((step/total)*100).toFixed(2)}%`;
}


/* update remaining time */
update_current_bytes()
update_max_bytes()
update_time_left()
setInterval(update_time_left, 1000)


/* helper for uploading data */
function makeRequest(method, url, blob, progressCallback) {
    return new Promise(function (resolve, reject) {
        let xhr = new XMLHttpRequest();
        xhr.open(method, url);
        xhr.onload = function () {
            if (this.status >= 200 && this.status < 300) {
                resolve(xhr.response);
            } else {
                reject({
                    status: this.status,
                    statusText: xhr.statusText,
                    message: xhr.responseText
                });
            }
        };
        xhr.onerror = function () {
            reject({
                status: this.status,
                statusText: xhr.statusText
            });
        };
        xhr.upload.onprogress = function (ev) {
            progressCallback(ev.loaded, ev.total)
        }
        xhr.send(blob);
    });
}

/** @type HTMLInputElement */
const fileInput = document.getElementById("file")
const status = document.getElementById("status")

fileInput.onchange = async (event) => {
    let files = fileInput.files
    let totalFiles = files.length;
    let totalSize = [...files].map(f => f.size).reduce((a,b) => a+b, 0)
    if (totalSize > MAX_SIZE_BYTES - uploaded_bytes) {
        alert(`This would exceed the data limit. ${format_bytes(totalSize)} is too much.`)
        return
    }
    let processedFiles = 0
    let processedSize = 0
    let errors = []

    document.getElementById("upload-btn").setAttribute("disabled", "disabled")
    document.getElementById("overall").style.display = totalFiles > 1 ? "block" : "none"
    document.getElementById("single-file").style.display = "block"

    for (let f of files) {
        status.innerText = `Uploading file ${processedFiles + 1}/${totalFiles}: ${f.name}`

        const initial_uploaded_bytes = uploaded_bytes
        await makeRequest("PUT", `{{ url }}${f.name}`, f, (p,t) => {
            update_progressbar("overall", processedSize, totalSize)
            update_progressbar("single-file", p, t)
            processedSize += initial_uploaded_bytes + p - uploaded_bytes
            uploaded_bytes = initial_uploaded_bytes + p
            update_current_bytes()
        }).catch((e) => {
            console.error("Error while uploading", f.name)
            console.log(e)
            errors.push([f.name, e.message])
        })

        processedFiles += 1;

        // add the file name to the list of uploaded files
        let node = document.createElement('div');
        node.appendChild(document.createTextNode(f.name));
        document.getElementById("file-list").appendChild(node)
    }

    // at the end, set all status information to final
    status.innerText = totalFiles == 1 ? `File ${files[0].name} uploaded!` : `${totalFiles} files uploaded, ${errors.length} failed!`
    document.getElementById("upload-btn").removeAttribute("disabled")
    update_progressbar("overall", totalSize, totalSize)
    update_progressbar("single-file", files[files.length - 1].size, files[files.length - 1].size)

    if (errors.length > 0) {
        alert("Upload finished, but not all files were uploaded successfully:\n\n" + errors.map(([f,e]) => `${f}: ${e.trim()}`).join("\n"))
    }

    // and reset file input
    fileInput.value = "";
}